#!/usr/bin/env python
from pmshell.commands import DirectoryCmd, PluginCmd, SettingsCmd, UpdateCmd
from pmshell.model import Track, Artist, Directory, Plugin, Setting
from pmshell.utils import Colors, colorize, parse_address, chunked_read, get
import argparse
import os


class PlexShell(DirectoryCmd, UpdateCmd, PluginCmd):
    ''' The command line interpretter '''

    def __init__(self, host, port, stdin = None):
        super(PlexShell, self).__init__(stdin = stdin)
        self.set_host(host, port)

    def help_get(self):
        print 'Get a resource'

    def help_edit(self):
        print 'Edit plugin settings'

    def complete_get(self, text, line, begidx, endidx):
        listing = self.list_directory(self.cwd)
        result = [node.name for node in listing
                  if node.name.startswith(text)
                  and isinstance(node, Track)]
        path = line.replace("get ", "")
        if not path:
            return [self.cwd.path]
        return [node.path.split("/")[-1]
                for node in listing if
                node.path.startswith(path)]

    def do_get(self, name):
        if not name:
            print self.list_directory(self.cwd, parse = False)
            return
        if name.startswith("/"):
            resource = get(self.conn, name, "Failed to get resource")
            if resource:
                print resource
            return
        track = self.get_track(name)
        if not track:
            print "%s does not exist" % name
            return
        print "get: %s" % track
        get(self.conn, track.path, "Failed to get track", progress = True)

    def do_edit(self, s):
        resource = get(self.conn, self.cwd.path, "Failed to get resource")
        if not SettingsCmd.is_settings_resource(resource):
            print "Cannot edit non-settings resource"
            return
        SettingsCmd(self.conn, self.cwd, stdin = self.stdin).cmdloop()


def main():
    parser = argparse.ArgumentParser(
        description = "A interactive command line PMS client")
    parser.add_argument(
        "-H", "--host",
        metavar = "hostname",
        nargs = "?",
        default = "localhost")
    parser.add_argument(
        "-p", "--port",
        metavar = "portno",
        nargs = "?",
        type = int,
        default = 32400)
    parser.add_argument(
        "-s", "--script",
        metavar = "scriptpath",
        nargs = "?",
        default = None)
    args = parser.parse_args()
    stdin = None
    if args.script:
        if not os.path.isfile(args.script):
            print "Script does not exist: %s" % args.script
            exit(1)
        stdin = open(args.script)
    client = PlexShell(args.host, args.port, stdin = stdin)
    client.cmdloop()


if __name__ == "__main__":
    main()

